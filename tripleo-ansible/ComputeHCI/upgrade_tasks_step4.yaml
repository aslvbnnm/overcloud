- name: Gather missing facts
  setup:
    gather_subset:
    - '!all'
    - '!min'
    - distribution
  tags:
  - always
- name: Set leapp facts
  set_fact:
    upgrade_leapp_command_options: ''
    upgrade_leapp_debug: false
    upgrade_leapp_devel_skip: ''
    upgrade_leapp_enabled: "{{ _upgradeLeappEnabled | bool and\n   ansible_facts['distribution']\
      \ == 'RedHat' and\n   ansible_facts['distribution_major_version'] is version('8',\
      \ '==') }}"
    upgrade_leapp_post_reboot_delay: 120
    upgrade_leapp_reboot_timeout: 3600
  tags:
  - always
  vars:
    _upgradeLeappEnabled: false
- block:
  - loop: '{{ modules_to_unload }}'
    name: Delete the kernel modules in Leapp database (device_driver_deprecation_data.json)
    shell: 'set -o pipefail && jq ''. | del(.data[] | select(.driver_name == "{{ item
      }}"))'' /etc/leapp/files/device_driver_deprecation_data.json > /etc/leapp/files/device_driver_deprecation_data.json_modified
      && mv /etc/leapp/files/device_driver_deprecation_data.json_modified /etc/leapp/files/device_driver_deprecation_data.json

      '
    vars:
      modules_to_unload: []
  - command:
      cmd: find /usr/share/leapp-repository/repositories/ -name {{ item }} -type d
        -print -exec rm -rf "{}" +
    loop: '{{ actors_to_remove }}'
    name: Remove leapp actors to prevent them inhibiting the upgrade
    vars:
      actors_to_remove: []
  - name: set leapp required answers
    shell: 'leapp answer --add --section check_vdo.confirm=True

      '
  - block:
    - name: Check if /boot/grub2/grubenv is simlink
      register: grub2_grubenv
      stat:
        path: /boot/grub2/grubenv
    - name: Check if /boot/efi/EFI/redhat/grubenv is simlink
      register: efi_grubenv
      stat:
        path: /boot/efi/EFI/redhat/grubenv
    - file:
        dest: /boot/grub2/grubenv
        force: true
        src: /boot/efi/EFI/redhat/grubenv
        state: link
      name: Symlink /boot/grub2/grubenv to /boot/efi/EFI/redhat/grubenv
      when:
      - grub2_grubenv.stat.islnk is defined and grub2_grubenv.stat.islnk == False
      - efi_grubenv.stat.islnk is defined and efi_grubenv.stat.islnk == False
    name: WA for /boot/grub2/grubenv
    when: upgrade_leapp_enabled
  - loop: '{{ nics_prefixes_to_keep|list }}'
    name: Keep nics with prefix in NICsPrefixesToUdev from renaming
    shell: "ip -j link show | \\ jq -r --arg prefix \"{{ item }}\" '.[] |\n  select((.ifname\
      \ | startswith($prefix)) and\n  (.ifname | test(\"^.*v[0-9]*$\") | not) and\n\
      \  (.ifname | test(\"^.*_[0-9]*$\") | not) and\n  (.ifname | test(\"^.*\\\\\
      ..*$\") | not)) |\n  if .permaddr? then .address=.permaddr else . end |\n  \"\
      SUBSYSTEM==\\\"net\\\",ACTION==\\\"add\\\",DRIVERS==\\\"?*\\\",\" + \"NAME=\\\
      \"\" + .ifname +\"\\\" ,ATTR{address}==\\\"\" + .address + \"\\\"\"' >> /etc/udev/rules.d/70-rhosp-persistent-net.rules\n"
    vars:
      nics_prefixes_to_keep: []
  - name: run leapp upgrade (download packages)
    shell: '{% if upgrade_leapp_devel_skip|default(false) %}{{ upgrade_leapp_devel_skip
      }}{% endif %} leapp upgrade {% if upgrade_leapp_debug|default(true) %}--debug{%
      endif %} {% if upgrade_leapp_command_options|default(false) %}{{ upgrade_leapp_command_options
      }}{% endif %}

      '
    when: upgrade_leapp_enabled
  name: system_upgrade_prepare step 4
  tags:
  - never
  - system_upgrade
  - system_upgrade_prepare
  when:
  - step|int == 4
  - upgrade_leapp_enabled
- block:
  - name: Run LeappPreRebootCommand
    shell: '#!/bin/bash


      '
  - name: reboot to perform the upgrade
    reboot:
      post_reboot_delay: '{{ upgrade_leapp_post_reboot_delay }}'
      reboot_timeout: '{{upgrade_leapp_reboot_timeout}}'
      test_command: source /etc/os-release; [ "${VERSION_ID%.*}" -ge "8" ] && systemctl
        is-system-running | grep -qE "running|degraded" || exit 1
  name: system_upgrade_run step 4
  tags:
  - never
  - system_upgrade
  - system_upgrade_run
  - system_upgrade_reboot
  when:
  - step|int == 4
  - upgrade_leapp_enabled
  - '''Undercloud'' not in group_names'
- block:
  - block:
    - name: Run UpgradeInitCommand
      shell: '#!/bin/bash


        if [[ -f /etc/resolv.conf.save ]] ; then rm /etc/resolv.conf.save; fi


        '
    - name: Run UpgradeInitCommonCommand
      shell: '#!/bin/bash


        '
    - dnf:
        name: '@{{ item.module }}:{{ item.stream }}/{{ item.profile|default(''common'')
          }}'
        state: present
      loop: '{{ dnf_module_list|list }}'
      name: Ensure DNF modules have the right stream
      vars:
        dnf_module_list: []
      when:
      - dnf_module_list|length > 0
      - item.distribution_version is defined
      - ansible_facts['distribution_major_version'] is version(item.distribution_version,
        '==')
    - name: Ensure TripleO prerequisite packages are installed
      package:
        name:
        - jq
        - lvm2
        - openstack-selinux
        - os-net-config
        - puppet-tripleo
        - python3-heat-agent*
        - rsync
        state: present
      when: ansible_facts['distribution_major_version'] is version('8', '==')
    - name: Ensure TripleO prerequisite packages are installed and use role based
        heat variable to provide specific list of packages
      package:
        name: '{{ base_tripleo_packages }}'
        state: present
      vars:
        base_tripleo_packages: []
      when:
      - ansible_facts['distribution_major_version'] is version('8', '==')
      - base_tripleo_packages|length > 0
    - name: WA for 2240185 - If the image is schema 1 and lacks signatures than add
        empty signatures
      shell: "for manifest_file in `find /var/lib/containers/storage/overlay-images/\
        \ -name 'manifest'`\ndo\n    cat <<< $( jq  'if .schemaVersion == 1 then if\
        \ has(\"signatures\") then . else .signatures=[] end else . end' $manifest_file\
        \ ) > $manifest_file\ndone\n"
      when: ansible_facts['distribution_major_version'] is version('8', '==')
    name: Package and repo update tasks
    when: step|int == 0
  - check_mode: false
    command: /usr/bin/rpm -q libvirt-daemon
    failed_when: false
    name: check if libvirt is installed
    register: libvirt_installed
    when: step|int == 0
  - loop:
    - libvirtd.service
    - virtlogd.socket
    name: make sure libvirt services are disabled and masked
    service:
      daemon_reload: true
      enabled: false
      masked: true
      name: '{{ item }}'
      state: stopped
    when:
    - step|int == 0
    - libvirt_installed.rc == 0
  - name: Special treatment for OpenvSwitch
    register: ovs_upgrade
    tripleo_ovs_upgrade: null
    when:
    - step|int == 2
  - name: Always ensure the openvswitch service is enabled and running after upgrades
    service:
      enabled: true
      name: openvswitch
      state: started
    when:
    - step|int == 2
    - ovs_upgrade.changed|bool
  - name: Check for os-net-config upgrade
    register: os_net_config_need_upgrade
    shell: yum check-upgrade | awk '/os-net-config/{print}'
    when: step|int == 3
  - name: Check that os-net-config has configuration
    register: stat_config_json
    stat:
      get_attributes: false
      get_checksum: false
      get_mime: false
      path: /etc/os-net-config/config.json
    when: step|int == 3
  - block:
    - name: Upgrade os-net-config
      package: name=os-net-config state=latest
    - changed_when: os_net_config_upgrade.rc == 2
      command: os-net-config --no-activate -c /etc/os-net-config/config.json -v --detailed-exit-codes
      failed_when: os_net_config_upgrade.rc not in [0,2]
      name: take new os-net-config parameters into account now
      register: os_net_config_upgrade
    when:
    - step|int == 3
    - os_net_config_need_upgrade.stdout
    - stat_config_json.stat.exists
  - name: Update all packages
    vars:
      skip_package_update: false
    when:
    - step|int == 3
    - not skip_package_update|bool
    yum:
      exclude: ansible-core
      name: '*'
      state: latest
  name: Host packages setup
  tags: setup_packages
- name: set first_controller fact
  set_fact:
    first_controller: '{{ groups[''ovn_controller'']|first|lower == ansible_facts[''hostname'']|lower
      }}'
- block:
  - async: 600
    become: true
    containers.podman.podman_image:
      force: true
      name: registry.redhat.io/rhosp-rhel9/openstack-ovn-controller:17.1.6
      validate_certs: false
    delegate_to: '{{ item }}'
    loop: '{{ groups[''ovn_controller''] | difference(groups[''excluded_overcloud''])
      }}'
    name: Force pull image in case image name doesn't change.
    poll: 0
    register: ovn_controller_image_update
    tags:
    - ovn
    - ovn_image
    when: step|int == 1
  - async_status:
      jid: '{{ async_result_item.ansible_job_id }}'
    become: true
    delay: 1
    delegate_to: '{{ async_result_item.item }}'
    loop: '{{ovn_controller_image_update.results }}'
    loop_control:
      loop_var: async_result_item
    name: Was the ovn_controller image pull successful.
    register: async_poll_results
    retries: 600
    tags:
    - ovn
    - ovn_image
    until: async_poll_results.finished
    when:
    - step|int == 1
    - '''results'' in ovn_controller_image_update'
  - debug:
      msg: ovn container will be using {{ image }}
    name: OVN Container image used
    tags: ovn
    vars:
      image: registry.redhat.io/rhosp-rhel9/openstack-ovn-controller:17.1.6
    when: step|int == 1
  - async: 600
    become: true
    delegate_to: '{{ item }}'
    loop: '{{ groups[''ovn_controller''] | difference(groups[''excluded_overcloud''])
      }}'
    name: Update OVN OVS related parameters before update.
    poll: 0
    register: ovs_vsctl
    shell: 'set -e

      ovs-vsctl set Open_vSwitch . external_ids:ovn-ofctrl-wait-before-clear={{ timeout
      }}

      ovs-vsctl set Open_vSwitch . external_ids:ovn-monitor-all=true

      ovs-vsctl set Open_vSwitch . external_ids:ovn-match-northd-version=false

      '
    tags:
    - ovn
    vars:
      timeout: 8000
    when:
    - step|int == 1
  - async_status:
      jid: '{{ async_result_item.ansible_job_id }}'
    become: true
    delay: 1
    delegate_to: '{{ async_result_item.item }}'
    loop: '{{ovs_vsctl.results }}'
    loop_control:
      loop_var: async_result_item
    name: Was the update of OVN OVS related parameter successful.
    register: async_poll_results
    retries: 600
    tags:
    - ovn
    until: async_poll_results.finished
    when:
    - step|int == 1
    - '''results'' in ovs_vsctl'
  - set_fact:
      any_ovn_host: '{{groups[''ovn_controller''] | difference(groups[''excluded_overcloud''])
        | first }}'
    tags: ovn
    when: step|int == 1
  - become: true
    delegate_to: '{{ any_ovn_host }}'
    find:
      paths: /var/lib/tripleo-config/container-startup-config/
      patterns: '*ovn_controller.json'
      recurse: true
    name: Find ovn_controller configs in container-startup-configs
    register: ovn_cont_17_0
    tags:
    - ovn
    when: (step|int == 1) and (any_ovn_host is defined) and (any_ovn_host|length >
      0)
  - name: get directory path from the ovn_cont_17_0
    set_fact:
      ovn_config_path: '{{ ovn_cont_17_0.files.0.path | dirname }}'
    tags: ovn
    when: step|int == 1
  - async: 600
    become: true
    delegate_to: '{{ item }}'
    loop: '{{ groups[''ovn_controller''] | difference(groups[''excluded_overcloud''])
      }}'
    name: Update ovn_controller.
    poll: 0
    register: ovn_controller_update
    tags: ovn
    tripleo_container_manage:
      config_dir: '{{ ovn_config_path }}'
      config_id:
      - tripleo_step{{config_step}}
      config_overrides:
        .*ovn_controller:
          image: registry.redhat.io/rhosp-rhel9/openstack-ovn-controller:17.1.6
          name: ovn_controller
      config_patterns: '*ovn_controller.json'
      debug: '{{ enable_debug | bool }}'
      log_base_path: '{{ container_log_stdout_path }}'
    vars:
      config_step: '{{ (''step_4'' in ovn_config_path) | ternary(''4'', ''3'')}}'
    when: step|int == 1
  - async_status:
      jid: '{{ async_result_item.ansible_job_id }}'
    become: true
    delay: 1
    delegate_to: '{{ async_result_item.item }}'
    loop: '{{ovn_controller_update.results }}'
    loop_control:
      loop_var: async_result_item
    name: Was the ovn_controller successful.
    register: async_poll_results
    retries: 600
    tags: ovn
    until: async_poll_results.finished
    when:
    - step|int == 1
    - '''results'' in ovn_controller_update'
  name: Trigger external_update OVN block on first controller
  when: first_controller | bool
